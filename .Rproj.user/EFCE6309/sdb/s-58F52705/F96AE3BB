{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Basics\"\nauthor: \"Paulo Cirino Ribeiro Neto\"\ndate: \"26/01/2017\"\noutput: ioslides_presentation\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, eval = TRUE, prompt = TRUE, results = TRUE, highlight = TRUE)\n```\n\n## Course Outline {.build .emphasized}\n- Syntax, data structures and operators;\n- Useful R base functions;\n- Conditional and control flow statements;\n- Creating custom Functions;\n- The **apply** functions;\n\n# Syntax, data structures and operators;\n\n## Arithmetics with R {.build .emphasized}\n### Addition Operator: '+'\n```{r, eval = TRUE}\n5 + 2\n```\n\n###\tSubtraction Operator: '-' \n```{r, eval = TRUE}\n5 - 2\n```\n\n## Arithmetics with R {.build .emphasized}\n### Multiplication Operator: '*'\n```{r, eval = TRUE}\n5 * 2\n```\n\n### Division Operator: '/'\n```{r, eval = TRUE}\n5 / 2\n```\n\n## Arithmetics with R {.build .emphasized}\n### Exponentiation Operator: '**' or '^'\n```{r, eval = TRUE}\n5 ** 2\n5 ^ 2\n```\n\n## Arithmetics with R {.build .emphasized}\n### Modulus Operator: '%%'\n```{r, eval = TRUE}\n5 %% 2\n```\n\n### Integer Division Operator: '%/%' \n```{r, eval = TRUE}\n5 %/% 2\n```\n\n## Data Types {.build .emphasized}\n### Integer:\n  - Numbers belonging to ${\\rm I\\!N}$ Set;\n  \n### Numeric:\n  - Numbers belonging to ${\\rm I\\!R}$ Set;\n  \n### Complex:\n  - Numbers belonging to ${\\rm I\\!C}$ Set;\n  \n## Data Types {.build .emphasized}\n### Character:\n  - Characters or Strings\n  \n### Factor:\n  - Categorical Variables\n  \n### Dates:\n  - Formated Dates\n\n## Data Structures {.build}\n### Vectors :\n  - It is a sequence of any one of the *data types*, it also can grow dynamically.\n\n```{r, echo = TRUE, eval = TRUE}\nc('foo', 'bar', 'baz')\n```\n\n```{r, echo = TRUE, eval = TRUE}\nc(-3.2, 4.6, 5.1)\n```\n\n```{r, echo = TRUE, eval = TRUE}\n1:10\n```\n  \n## Data Structures {.build}\n### Matrices : \n  - A 2 dimension array of any one of the data types that has got pre-established size.\n```{r, echo = TRUE, eval = TRUE}\nmatrix(data = 1:6, ncol = 3, nrow = 2)\n```\n\n```{r, echo = TRUE, eval = TRUE}\nmatrix(data = c('foo', 'baz', 'bar', 'faz'),\n       ncol = 2, nrow = 2)\n```\n  \n## Data Structures {.build}\n### Arrays : \n  - An multidimensional array of any one of the data types that has got pre-established size.\n```{r}\narray(data = 1:12, dim = c(2,3,2))\n```\n  \n## Data Structures {.build}\n### Data Frames :\n  - A 2 dimension array that can hold multiple data types, each one in a different column.\n```{r}\ndata.frame(Name = c('John', 'Jack', 'Jose'),\n           Age = c(20, 25, 22),\n           Height = c(1.78, 1.92, 1.71))\n```\n  \n## Data Structures {.build}\n### Lists : \n  - A collction of many different data types that can grow dynamically.\n```{r}\nlist(Supermarket = data.frame(\n  Product = c('Soup', 'Potatoes', 'Tooth Paste'),\n  Quantity = c(3, 20, 2)),\n  Date = Sys.Date())\n```\n\n## Variable Assignment {.build}\n### Left Assignment : '<-'\n```{r, eval = TRUE}\nnumbers <- c(3.2, 5.7, -12.1)\nnumbers\n```\n\n```{r, eval = TRUE}\nname <- 'Jack'\nname\n```\n\n## Variable Assignment {.build}\n### Left Assignment : '<<-'\n```{r, eval = TRUE}\nnumber <<- 13\nnumber\n```\n\n```{r, eval = TRUE}\ncols <<- factor(c('blue', 'black', 'blue'))\ncols\n```\n\n## Variable Assignment {.build}\n### Difference of '<<-' and '<-' :\n\nThe '<<-' will check parent environments for an existing variable, if a variable is not found then its value is redefined, otherwise it take the global environment value.\n\n```{r, eval = TRUE, error = TRUE, warning = TRUE}\ntry(c <<- factor(c('blue', 'black', 'blue')))\nc\n```\n\n```{r, eval = TRUE}\ntry(c <- factor(c('blue', 'black', 'blue')))\nc\n```\n\n## Variable Assignment {.build}\n### Difference of '<<-' and '<-' :\n\n```{r, eval = TRUE, error = TRUE, warning = TRUE}\npi\n```\n\n```{r, eval = TRUE}\ntry(pi <<- -19)\npi\n```\n\n```{r, eval = TRUE}\ntry(pi <- -19)\npi\n```\n\n## Variable Assignment {.build}\n### Right Assignment : '->' and '->>'\n```{r, eval = TRUE}\nletters\n```\n\n```{r, eval = TRUE}\ntry(1234 ->> letters)\nletters\n```\n\n```{r, eval = TRUE}\ntry(1234 -> letters)\nletters\n```\n\n## Variable Assignment {.build}\n### Right Assignment : '->' and '->>'\n```{r, eval = TRUE}\nc(TRUE, TRUE, FALSE) ->> Bools\nBools\n```\n\n```{r, eval = TRUE}\nc(FALSE, FALSE, TRUE) ->> Bools\nBools\n```\n\n## Variable Assignment {.build}\n### Equal Assignment : '='\n```{r, eval = TRUE}\nx <- 10\nprint(args(sample))\n```\n\n```{r, eval = TRUE}\nsample(x = 6)\n```\n\n```{r, eval = TRUE}\nx\n```\n\n## Variable Assignment {.build}\n### Equal Assignment : '='\n```{r, eval = TRUE}\nsample(x <- 3 )\n```\n\n```{r, eval = TRUE}\nx\n```\n\n## Variable Assignment {.build}\n  - The '->', '<-' and '=' are assign into the environment in which they are evaluated (inside a funciton or a script).\n  - The '->>' and '<<-' ared assigned globally.\n  - The '<-' is the correct assignment operator for variables.\n```{r}\na <- 15\nb <- 'character string'\n```\n\n\n## Variable Assignment {.build}\n  - The '=' is the correct assignment operator for subexpressions in a braced list of expressions.\n```{r}\nlistVar <- list(var1 = 12, var2 = 'abc')\nprint(x = listVar)\n``` \n\n\n## Relational Operators\n- Less than : '<'\n- Less than or Equal to : '<='\n- Greater than : '>'\n- Greater than or Equal to : '>='\n-\tExactly Equal to : '=='\n-\tNot Equal to : '!='\n\n## Relational Operators\n```{r}\nTRUE == 1\n```\n\n```{r}\n12 != 'b'\n```\n\n```{r}\n12 >= 12\n```\n\n## Relational Operators on Vectors\n```{r}\n10 > 9:11\n```\n\n```{r}\nrep(10, 3) == 9:11\n```\n\n```{r}\n9:11 == rep(10, 3)\n```\n\n## Logical Operators\n-\tNot : '!'\n```{r}\n!TRUE\n```\n\n```{r}\n!2\n```\n\n```{r}\n!FALSE\n```\n\n## Logical Operators\n### And : '&' or '&&'\n```{r}\nTRUE & 1\n``` \n\n```{r}\n( (2:4) >= 3) & ( (2:4) <= 3)\n```\n\n```{r}\n( (2:4) >= 3) && ( (2:4) <= 3)\n```\n\n\n## Logical Operators\n### Or : '|' or '||'\n```{r}\n( (2:4) >= 3) | ( (2:4) == 2)\n```\n\n```{r}\n( (2:4) >= 3) || ( (2:4) == 2)\n```\n\n```{r}\n( (2:4) >= 3) | ( (2:4) == 3)\n```\n\n```{r}\n( (2:4) >= 3) || ( (2:4) == 3)\n```\n\n## Selection Operators\n### Select : '[]'\n```{r}\nLETTERS\n```\n\n```{r}\nLETTERS[5]\n```\n\n```{r}\nLETTERS[5:10]\n```\n\n## Selection Operators\n### Select : '[]'\n```{r}\nLETTERS[-1]\n```\n\n```{r}\nLETTERS[-1:-10]\n```\n\n## Selection Operators\n### Select : '[]'\n```{r}\nauxVar <- c('apple', 'orange', 'Ã¡vocado')\nauxVar\n```\n\n```{r}\nauxVar[1] <- 'strawberry'\nauxVar\n```\n\n```{r}\nauxVar[3] <- 'grapes'\nauxVar\n```\n\n## Selection Operators\n### Select : '[]'\n```{r}\nauxVar[4] <- 'blueberry'\nauxVar\n```\n\n```{r}\nauxVar[7] <- 'water melon'\nauxVar\n```\n\n## Selection Operators\n### Select : '$'\n\n```{r}\nauxList <- list( names = c('Paulo', 'Cirino'),\n                 numbers = c(12, 14, 15))\nauxList$names\n```\n\n```{r}\nauxList$numbers\n```\n\n## Miscellaneous Operators\n- Range : ':'\n```{r}\n1:10\n```\n\n- In : '%in%'\n```{r}\n5 %in% 1:10\n```\n\n```{r}\n40 %in% 1:10\n```\n\n- Help : '?'\n```{r}\n?class\n```\n\n## Pro Tips\n- Always use the __?__ operator and the **help()** function when dealing with unknown functions or packages;\n- Always use **<-** operator when assignning a variable in the program a value, exe : **a <- 10** ;\n- Always use the **=** operator when assignning a variable in a function call, exe : **is.na(x = a)**;\n- Avoid using **->** operator, because it makes the code messy;\n- Always use the **\\$** operator to select named columns of data frame, exe : DF$X1 ;\n- Always use the **[]** operator to select row or columns when using operation, exe : **DF[DF$X1 == 1, ]**;\n\n# Useful R base functions\n\n## Important Functions\n### class : Checks the class of a variable.\n```{r}\nclass(1234)\n```\n\n### help : Opens package or funciton documentation.\n```{r, eval = FALSE}\nhelp(lm)\n```\n\n### summary : Returns Variable Summary.\n```{r}\nsummary(1:10)\n```\n\n\n## Important Functions\n### Sys.time : Returns a Time Stamp.\n```{r}\nSys.time()\n```\n\n### sample : Generates Sample integers\n```{r, eval = FALSE}\nsample(10, 3)\n```\n\n### rnorm : Generates Normal Distribution.\n```{r}\nrnorm(10)\n```\n\n## Important Functions\n### print : Prints String as is.\n```{r}\nprint('R is super \\'cools\\'')\n```\n\n### cat : Prints C like function expressions.\n```{r, eval = FALSE}\ncat('R is super \\'cools\\'')\n```\n\n### try : Try a function but keeps going\n```{r}\ntry(asdfasd * 1234213 / 0)\n```\n\n## Important Functions\n### library : Loads a package.\n```{r, eval = FALSE}\nlibrary('Rcpp')\n```\n\n### require : Try loading a package.\n```{r, eval = FALSE}\nrequire('DT')\n```\n\n### install.packages : Install a package\n```{r, eval = FALSE}\ninstall.packages('ggplot2')\n```\n\n### View : View a Data Frame or Matrix\n```{r, eval = FALSE}\nView(iris)\n```\n\n## Important Functions\n### source : Source R file\n```{r, eval = FALSE}\nsource('Code.R')\n```\n\n### paste : Paste things as characters\n```{r, eval = FALSE}\npaste('R', ' is like a ' 10)\n```\n\n### order : Returns order of a vector\n```{r, eval = FALSE}\norder(c(10, -3, 1)) # returns [2 3 1]\n```\n\n### order : Returns order of a vector\n```{r, eval = FALSE}\norder(c(10, -3, 1)) # returns [2 3 1]\n```\n\n### order : Returns order of a vector\n```{r, eval = FALSE}\nrm( list = c('Data1', 'Data2') )\n```\n\n\n## Math Functions\n\n### t : Transpose\n```{r}\nt(matrix(1:9, ncol = 3, nrow = 3))\n```\n\n### mean : Calculates mean\n```{r}\nmean(1:3)\n```\n\n### max : Calculates max\n```{r}\nmax(1:3)\n```\n\n## Math Functions\n\n### sum : Sums a vector\n```{r}\nsum (1:3)\n```\n\n### round : Rounds Closest\n```{r}\nround (3.14, 1)\n```\n\n### ceil : Rounds up.\n```{r}\nceiling (3.14)\n```\n\n### floor : Rounds down\n```{r}\nfloor (3.14)\n```\n\n\n## Data Frames\n### nrow : Counts Number of Rows\n```{r}\nnrow(iris)\n```\n\n### ncol : Counts Number of Columns\n```{r}\nncol(iris)\n```\n\n### dim : Returns Number of Dimensions\n```{r}\ndim(iris)\n```\n\n## Data Frames\n### tail : Last Data Frame Observations\n```{r}\ntail(iris, 3)\n```\n\n### head : Fist Data Frame Observations\n```{r}\nhead(iris)\n```\n\n### colnames : Column names of Data Frames or Matrixes\n```{r}\ncolnames(iris)\n```\n\n## List\n```{r}\nmyList <- list(a = 1:10, b = LETTERS[10:15])\n```\n\n### length : Length of Object\n```{r}\nlength(myList)\n```\n\n### names : Objects named inner variables\n```{r}\nnames(myList)\n```\n\n\n## Pro Tips\n- Always use **dim()**, **class()**, **names()**, **head()**, **summary()** beforehand when dealing with unknown dataset;\n\n- When creating scripts try using \n\n# Conditional and control flow statements;\n# Creating custom Functions;\n# The **apply** functions;\n",
    "created" : 1491566737774.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1319683248",
    "id" : "F96AE3BB",
    "lastKnownWriteTime" : 1491576813,
    "last_content_update" : 1491576813457,
    "path" : "~/Dropbox/My-R-Course/R Basics/Slides01.Rmd",
    "project_path" : "R Basics/Slides01.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}